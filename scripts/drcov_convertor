#!/usr/bin/env python3
# Use of this source code is governed by a Apach 2.0 license that can be
# found in the LICENSE file.

"""DRCOV convertor tool."""

import argparse
import logging
import os
import os.path
import sys

import tsmok.common.error as error
import tsmok.coverage.disasm_representation as disasm_representation
import tsmok.coverage.drcov as drcov
import tsmok.coverage.drcov_convertor as drcov_convertor
import tsmok.coverage.dwarf_representation as dwarf_representation


# Run ROM
def main(args):
  """Runs convertor.

  Args:
    args: Arguments from command line

  Returns:
    0, if no error, -1 otherwise
  """

  log_level = None
  log_fmt = '| %(funcName)32s:%(lineno)-4d| %(levelname)-7s| %(message)s'
  if not args.verbose:
    log_fmt = '| %(name)-32s| %(levelname)-7s| %(message)s'
    log_level = logging.ERROR
  elif args.verbose == 1:
    log_level = logging.INFO
  else:
    log_level = logging.DEBUG

  logging.basicConfig(format=log_fmt, level=logging.NOTSET)
  log = logging.getLogger('[MAIN]')
  log.setLevel(log_level)

  try:
    rep = dwarf_representation.DwarfRepresentation(log_level=log_level)
    rep.load_source(args.binary)
  except error.Error as e:
    log.debug('DWARF is not supported: %s.\n Use DISASM.', e.message)
    rep = disasm_representation.DisAsmRepresentation(log_level=log_level)
    rep.load_source(args.binary)

  try:
    if args.drcov:
      log.info('Exporting coverage from %s ...', args.drcov.name)
      cov = drcov.DrCov()
      cov.load(args.drcov.read())
      cov.export(rep)
    elif args.coverage_dir:
      for _, _, filenames in os.walk(args.coverage_dir):
        for file in filenames:
          log.info('Exporting coverage from %s ...', file)
          with open(args.coverage_dir + '/' + file, 'rb') as f:
            cov = drcov.DrCov()
            cov.load(f.read())
            cov.export(rep)
    else:
      raise error.Error('Wrong argument list')

    if args.type == 'gcov':
      convertor = drcov_convertor.GcovConvertor(rep, log_level=log_level)
    elif args.type == 'lcov':
      convertor = drcov_convertor.LcovConvertor(rep, log_level=log_level)
    elif args.type == 'simple':
      convertor = drcov_convertor.BriefTxtConvertor(rep, log_level=log_level)
    else:
      raise error.Error('Unsupported format')

    convertor.dump(args.output)
    return 0
  except error.Error as e:
    log.error(e.message)
    return -1


class ReadableDir(argparse.Action):
  """argparse action to check that a dir is readable."""

  def __call__(self, parser, namespace, values, option_string=None):
    prospective_dir = values
    if not os.path.isdir(prospective_dir):
      raise argparse.ArgumentTypeError(f'ReadableDir:{prospective_dir} is '
                                       'not a valid path')
    if os.access(prospective_dir, os.R_OK):
      setattr(namespace, self.dest, prospective_dir)
    else:
      raise argparse.ArgumentTypeError(f'ReadableDir:{prospective_dir} is '
                                       'not a readable dir')


def parse_args():
  """Parses command line arguments."""

  ag = argparse.ArgumentParser(description='Convert DRCOV coverate into one '
                                           'supported format')

  ag.add_argument('--verbose', '-v', action='count',
                  help='Increase output verbosity')

  ag.add_argument('--binary', '-b', type=argparse.FileType('rb'),
                  required=True, help='Binary ELF file')

  ag.add_argument('--type', '-t', choices=['gcov', 'lcov', 'simple'],
                  required=True, help='Output coverage format [gcov or lcov]')

  group = ag.add_mutually_exclusive_group(required=True)
  group.add_argument('--drcov', '-c', default=None,
                     type=argparse.FileType('rb'),
                     help='drcov.DrCov file with block coverage')
  group.add_argument('--coverage-dir', '-d',
                     action=ReadableDir, default=None,
                     help='Directory with drcov.DrCov coverage data')

  ag.add_argument('--output', '-o', type=str, required=True,
                  help='Output directory')

  return ag.parse_args()


if __name__ == '__main__':
  sys.exit(main(parse_args()))
